//
//  GLSphereExt.cpp
//  HCI557_GLSphereDirect
//
//  Created by Rafael Radkowski on 9/26/15.
//
//

#include "GLSphereDirect.h"




GLSphereDirect::GLSphereDirect(float center_x, float center_y, float center_z, float radius, int rows, int segments, glm::vec3 matl_ambient_color, int lightSourceOption)
{

    _center.x() = center_x;
    _center.y() = center_y;
    _center.z() = center_z;
    
    
    _radius = radius;
    _rows = rows;
    _segments = segments;
    
    _render_normal_vectors = false;
	_material._ambient_material = matl_ambient_color;
	_lightSourceOption = lightSourceOption;
    
    initShader();
    initVBO();
    
    initShaderNormal();
    initVBONormals();

}


GLSphereDirect::~GLSphereDirect()
{
    
    // Program clean up when the window gets closed.
    glDeleteVertexArrays(1, _vaoID);
    glDeleteVertexArrays(1, _vaoIDNormals);
    glDeleteProgram(_program1);
	glDeleteProgram(_program2);
	glDeleteProgram(_program3);
	glDeleteProgram(_program4);
    glDeleteProgram(_program_normals);
}





/*
 Inits the shader program for this object
 */
void GLSphereDirect::initShader(void)
{
#ifdef _WIN32
    // This loads the shader program from a file
	_program = LoadAndCreateShaderProgram("../data/shaders/spotlightDiffuse.vs", "../data/shaders/directlight.fs");
	_program1 = LoadAndCreateShaderProgram("../data/shaders/spotlightDiffuse.vs", "../data/shaders/directlight.fs");
	_program2 = LoadAndCreateShaderProgram("../data/shaders/spotlightDiffuse.vs", "../data/shaders/directlight.fs");
	_program3 = LoadAndCreateShaderProgram("../data/shaders/spotlightDiffuse.vs", "../data/shaders/directlight.fs");
	_program4 = LoadAndCreateShaderProgram("../data/shaders/spotlightDiffuse.vs", "../data/shaders/directlight.fs");
#else
	 // This loads the shader program from a file
    _program = LoadAndCreateShaderProgram("../../data/shaders/directlight.vs", "../../data/shaders/directlight.fs");
#endif

    

	switch (_lightSourceOption)
	{
	case 1: 

		glUseProgram(_program1);


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Vertex information / names

		glBindAttribLocation(_program1, 0, "in_Position");
		glBindAttribLocation(_program1, 1, "in_Normal");
		glBindAttribLocation(_program1, 2, "in_Color");


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Define the model view matrix. 


		_modelMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f)); // Create our model matrix which will halve the size of our model


		_projectionMatrixLocation = glGetUniformLocation(_program1, "projectionMatrixBox"); // Get the location of our projection matrix in the shader
		_viewMatrixLocation = glGetUniformLocation(_program1, "viewMatrixBox"); // Get the location of our view matrix in the shader
		_modelMatrixLocation = glGetUniformLocation(_program1, "modelMatrixBox"); // Get the location of our model matrix in the shader



		glUniformMatrix4fv(_projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix()[0][0]); // Send our projection matrix to the shader
		glUniformMatrix4fv(_viewMatrixLocation, 1, GL_FALSE, &viewMatrix()[0][0]); // Send our view matrix to the shader
		glUniformMatrix4fv(_modelMatrixLocation, 1, GL_FALSE, &_modelMatrix[0][0]); // Send our model matrix to the shader


																					///////////////////////////////////////////////////////////////////////////////////////////////
																					// Material
		_material._diffuse_material = glm::vec3(0.0, 0.5, 0.0);
		//_material._ambient_material = glm::vec3(1.0, 0.5, 0.0);
		_material._specular_material = glm::vec3(1.0, 1.0, 1.0);
		_material._shininess = 1.0;


		_material._ambientColorPos = glGetUniformLocation(_program1, "ambient_color");
		_material._diffuseColorPos = glGetUniformLocation(_program1, "diffuse_color");
		_material._specularColorPos = glGetUniformLocation(_program1, "specular_color");
		_material._shininessIdx = glGetUniformLocation(_program1, "shininess");


		// Send the material to your shader program
		glUniform3fv(_material._ambientColorPos, 1, &_material._ambient_material[0]);
		glUniform3fv(_material._diffuseColorPos, 1, &_material._diffuse_material[0]);
		glUniform3fv(_material._specularColorPos, 1, &_material._specular_material[0]);
		glUniform1f(_material._shininessIdx, _material._shininess);
		std::cout << "testing\n";
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Light

		//_material._ambient_material = glm::vec3(0.0, 0.0, 1.0);

		// define the position of the light and send the light position to your shader program
		_light_source1._lightPos = glm::vec4(-20.0, 20.0, 0.0, 0.0);
		_light_source1._ambient_intensity = 0.3;
		_light_source1._specular_intensity = 0.5;
		_light_source1._diffuse_intensity = 1.0;
		_light_source1._attenuation_coeff = 0.02;


		//_light_source1._cone_angle = 12.0; // in degree
		//_light_source1._cone_direction = glm::vec3(-1.0, -1.0, 0.0); // this must be aligned with the object and light position.



																	 // Read all the index values from the shader program
		_light_source1._ambientIdx = glGetUniformLocation(_program1, "ambient_intensity");
		_light_source1._diffuseIdx = glGetUniformLocation(_program1, "diffuse_intensity");
		_light_source1._specularIdx = glGetUniformLocation(_program1, "specular_intensity");
		_light_source1._attenuation_coeffIdx = glGetUniformLocation(_program1, "attenuationCoefficient");
		_light_source1._lightPosIdx = glGetUniformLocation(_program1, "light_position");


		// Send the light information to your shader program
		glUniform1f(_light_source1._ambientIdx, _light_source1._ambient_intensity);
		glUniform1f(_light_source1._diffuseIdx, _light_source1._diffuse_intensity);
		glUniform1f(_light_source1._specularIdx, _light_source1._specular_intensity);
		glUniform1f(_light_source1._attenuation_coeffIdx, _light_source1._attenuation_coeff);
		glUniform4fv(_light_source1._lightPosIdx, 1, &_light_source1._lightPos[0]);



	case 2:


		glUseProgram(_program2);


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Vertex information / names

		glBindAttribLocation(_program2, 0, "in_Position");
		glBindAttribLocation(_program2, 1, "in_Normal");
		glBindAttribLocation(_program2, 2, "in_Color");


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Define the model view matrix. 


		_modelMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f)); // Create our model matrix which will halve the size of our model


		_projectionMatrixLocation = glGetUniformLocation(_program2, "projectionMatrixBox"); // Get the location of our projection matrix in the shader
		_viewMatrixLocation = glGetUniformLocation(_program2, "viewMatrixBox"); // Get the location of our view matrix in the shader
		_modelMatrixLocation = glGetUniformLocation(_program2, "modelMatrixBox"); // Get the location of our model matrix in the shader



		glUniformMatrix4fv(_projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix()[0][0]); // Send our projection matrix to the shader
		glUniformMatrix4fv(_viewMatrixLocation, 1, GL_FALSE, &viewMatrix()[0][0]); // Send our view matrix to the shader
		glUniformMatrix4fv(_modelMatrixLocation, 1, GL_FALSE, &_modelMatrix[0][0]); // Send our model matrix to the shader


																					///////////////////////////////////////////////////////////////////////////////////////////////
																					// Material
		_material._diffuse_material = glm::vec3(0.0, 0.5, 0.0);
		//_material._ambient_material = glm::vec3(1.0, 0.5, 0.0);
		_material._specular_material = glm::vec3(1.0, 1.0, 1.0);
		_material._shininess = 1.0;


		_material._ambientColorPos = glGetUniformLocation(_program2, "ambient_color");
		_material._diffuseColorPos = glGetUniformLocation(_program2, "diffuse_color");
		_material._specularColorPos = glGetUniformLocation(_program2, "specular_color");
		_material._shininessIdx = glGetUniformLocation(_program2, "shininess");


		// Send the material to your shader program
		glUniform3fv(_material._ambientColorPos, 1, &_material._ambient_material[0]);
		glUniform3fv(_material._diffuseColorPos, 1, &_material._diffuse_material[0]);
		glUniform3fv(_material._specularColorPos, 1, &_material._specular_material[0]);
		glUniform1f(_material._shininessIdx, _material._shininess);
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Light


		_material._ambient_material = glm::vec3(1.0, 0.0, 0.0);
		// define the position of the light and send the light position to your shader program
		_light_source2._lightPos = glm::vec4(20.0, 21.0, 0.0, 0.0);
		_light_source2._ambient_intensity = 0.3;
		_light_source2._specular_intensity = 0.5;
		_light_source2._diffuse_intensity = 1.0;
		_light_source2._attenuation_coeff = 0.02;


		//_light_source2._cone_angle = 12.0; // in degree
		//_light_source2._cone_direction = glm::vec3(-1.0, -1.0, 0.0); // this must be aligned with the object and light position.



																	 // Read all the index values from the shader program
		_light_source2._ambientIdx = glGetUniformLocation(_program2, "ambient_intensity");
		_light_source2._diffuseIdx = glGetUniformLocation(_program2, "diffuse_intensity");
		_light_source2._specularIdx = glGetUniformLocation(_program2, "specular_intensity");
		_light_source2._attenuation_coeffIdx = glGetUniformLocation(_program2, "attenuationCoefficient");
		_light_source2._lightPosIdx = glGetUniformLocation(_program2, "light_position");


		// Send the light information to your shader program
		glUniform1f(_light_source2._ambientIdx, _light_source2._ambient_intensity);
		glUniform1f(_light_source2._diffuseIdx, _light_source2._diffuse_intensity);
		glUniform1f(_light_source2._specularIdx, _light_source2._specular_intensity);
		glUniform1f(_light_source2._attenuation_coeffIdx, _light_source2._attenuation_coeff);
		glUniform4fv(_light_source2._lightPosIdx, 1, &_light_source2._lightPos[0]);



	case 3:


		glUseProgram(_program3);


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Vertex information / names

		glBindAttribLocation(_program3, 0, "in_Position");
		glBindAttribLocation(_program3, 1, "in_Normal");
		glBindAttribLocation(_program3, 2, "in_Color");


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Define the model view matrix. 


		_modelMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f)); // Create our model matrix which will halve the size of our model


		_projectionMatrixLocation = glGetUniformLocation(_program3, "projectionMatrixBox"); // Get the location of our projection matrix in the shader
		_viewMatrixLocation = glGetUniformLocation(_program3, "viewMatrixBox"); // Get the location of our view matrix in the shader
		_modelMatrixLocation = glGetUniformLocation(_program3, "modelMatrixBox"); // Get the location of our model matrix in the shader



		glUniformMatrix4fv(_projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix()[0][0]); // Send our projection matrix to the shader
		glUniformMatrix4fv(_viewMatrixLocation, 1, GL_FALSE, &viewMatrix()[0][0]); // Send our view matrix to the shader
		glUniformMatrix4fv(_modelMatrixLocation, 1, GL_FALSE, &_modelMatrix[0][0]); // Send our model matrix to the shader


																					///////////////////////////////////////////////////////////////////////////////////////////////
																					// Material
		_material._diffuse_material = glm::vec3(0.0, 0.5, 0.0);
		//_material._ambient_material = glm::vec3(1.0, 0.5, 0.0);
		_material._specular_material = glm::vec3(1.0, 1.0, 1.0);
		_material._shininess = 1.0;


		_material._ambientColorPos = glGetUniformLocation(_program3, "ambient_color");
		_material._diffuseColorPos = glGetUniformLocation(_program3, "diffuse_color");
		_material._specularColorPos = glGetUniformLocation(_program3, "specular_color");
		_material._shininessIdx = glGetUniformLocation(_program3, "shininess");


		// Send the material to your shader program
		glUniform3fv(_material._ambientColorPos, 1, &_material._ambient_material[0]);
		glUniform3fv(_material._diffuseColorPos, 1, &_material._diffuse_material[0]);
		glUniform3fv(_material._specularColorPos, 1, &_material._specular_material[0]);
		glUniform1f(_material._shininessIdx, _material._shininess);
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Light

		// define the position of the light and send the light position to your shader program
		_light_source1._lightPos = glm::vec4(20.0, 20.0, 0.0, 0.0);
		_light_source1._ambient_intensity = 0.0;
		_light_source1._specular_intensity = 0.0;
		_light_source1._diffuse_intensity = 0.0;
		_light_source1._attenuation_coeff = 0.02;


		//_light_source1._cone_angle = 12.0; // in degree
		//_light_source1._cone_direction = glm::vec3(-1.0, -1.0, 0.0); // this must be aligned with the object and light position.



																	 // Read all the index values from the shader program
		_light_source1._ambientIdx = glGetUniformLocation(_program3, "ambient_intensity");
		_light_source1._diffuseIdx = glGetUniformLocation(_program3, "diffuse_intensity");
		_light_source1._specularIdx = glGetUniformLocation(_program3, "specular_intensity");
		_light_source1._attenuation_coeffIdx = glGetUniformLocation(_program3, "attenuationCoefficient");
		_light_source1._lightPosIdx = glGetUniformLocation(_program3, "light_position");


		// Send the light information to your shader program
		glUniform1f(_light_source1._ambientIdx, _light_source1._ambient_intensity);
		glUniform1f(_light_source1._diffuseIdx, _light_source1._diffuse_intensity);
		glUniform1f(_light_source1._specularIdx, _light_source1._specular_intensity);
		glUniform1f(_light_source1._attenuation_coeffIdx, _light_source1._attenuation_coeff);
		glUniform4fv(_light_source1._lightPosIdx, 1, &_light_source1._lightPos[0]);


	case 4:


		glUseProgram(_program4);


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Vertex information / names

		glBindAttribLocation(_program4, 0, "in_Position");
		glBindAttribLocation(_program4, 1, "in_Normal");
		glBindAttribLocation(_program4, 2, "in_Color");


		///////////////////////////////////////////////////////////////////////////////////////////////
		// Define the model view matrix. 


		_modelMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f)); // Create our model matrix which will halve the size of our model


		_projectionMatrixLocation = glGetUniformLocation(_program4, "projectionMatrixBox"); // Get the location of our projection matrix in the shader
		_viewMatrixLocation = glGetUniformLocation(_program4, "viewMatrixBox"); // Get the location of our view matrix in the shader
		_modelMatrixLocation = glGetUniformLocation(_program4, "modelMatrixBox"); // Get the location of our model matrix in the shader



		glUniformMatrix4fv(_projectionMatrixLocation, 1, GL_FALSE, &projectionMatrix()[0][0]); // Send our projection matrix to the shader
		glUniformMatrix4fv(_viewMatrixLocation, 1, GL_FALSE, &viewMatrix()[0][0]); // Send our view matrix to the shader
		glUniformMatrix4fv(_modelMatrixLocation, 1, GL_FALSE, &_modelMatrix[0][0]); // Send our model matrix to the shader


																					///////////////////////////////////////////////////////////////////////////////////////////////
																					// Material
		_material._diffuse_material = glm::vec3(0.0, 0.5, 0.0);
		//_material._ambient_material = glm::vec3(1.0, 0.5, 0.0);
		_material._specular_material = glm::vec3(1.0, 1.0, 1.0);
		_material._shininess = 1.0;


		_material._ambientColorPos = glGetUniformLocation(_program4, "ambient_color");
		_material._diffuseColorPos = glGetUniformLocation(_program4, "diffuse_color");
		_material._specularColorPos = glGetUniformLocation(_program4, "specular_color");
		_material._shininessIdx = glGetUniformLocation(_program4, "shininess");


		// Send the material to your shader program
		glUniform3fv(_material._ambientColorPos, 1, &_material._ambient_material[0]);
		glUniform3fv(_material._diffuseColorPos, 1, &_material._diffuse_material[0]);
		glUniform3fv(_material._specularColorPos, 1, &_material._specular_material[0]);
		glUniform1f(_material._shininessIdx, _material._shininess);
		///////////////////////////////////////////////////////////////////////////////////////////////
		// Light

		// define the position of the light and send the light position to your shader program
		_light_source1._lightPos = glm::vec4(20.0, 20.0, 0.0, 0.0);
		_light_source1._ambient_intensity = 1.0;
		_light_source1._specular_intensity = 1.0;
		_light_source1._diffuse_intensity = 10.0;
		_light_source1._attenuation_coeff = 0.02;


		//_light_source1._cone_angle = 12.0; // in degree
		//_light_source1._cone_direction = glm::vec3(-1.0, -1.0, 0.0); // this must be aligned with the object and light position.



																	 // Read all the index values from the shader program
		_light_source1._ambientIdx = glGetUniformLocation(_program4, "ambient_intensity");
		_light_source1._diffuseIdx = glGetUniformLocation(_program4, "diffuse_intensity");
		_light_source1._specularIdx = glGetUniformLocation(_program4, "specular_intensity");
		_light_source1._attenuation_coeffIdx = glGetUniformLocation(_program4, "attenuationCoefficient");
		_light_source1._lightPosIdx = glGetUniformLocation(_program4, "light_position");


		// Send the light information to your shader program
		glUniform1f(_light_source1._ambientIdx, _light_source1._ambient_intensity);
		glUniform1f(_light_source1._diffuseIdx, _light_source1._diffuse_intensity);
		glUniform1f(_light_source1._specularIdx, _light_source1._specular_intensity);
		glUniform1f(_light_source1._attenuation_coeffIdx, _light_source1._attenuation_coeff);
		glUniform4fv(_light_source1._lightPosIdx, 1, &_light_source1._lightPos[0]);


	default:
		break;
	}



    
    glUseProgram(0);

}


/*!
Draw the objects
*/
void GLSphereDirect::draw(void)
{

	//////////////////////////////////////////////////
	// Renders the sphere

	// Enable the shader program
	glUseProgram(_lightSourceOption);

	// this changes the camera location
	glm::mat4 rotated_view = rotatedViewMatrix();
	glUniformMatrix4fv(_viewMatrixLocation, 1, GL_FALSE, &rotated_view[0][0]); // send the view matrix to our shader

	glUniformMatrix4fv(_modelMatrixLocation, 1, GL_FALSE, &_modelMatrix[0][0]); //

																				// Bind the buffer and switch it to an active buffer
	glBindVertexArray(_vaoID[0]);

	//glPolygonMode( GL_FRONT_AND_BACK, GL_LINE ); // allows to see the primitives
	// Draw the triangles
	glDrawArrays(GL_TRIANGLE_STRIP, 0, _num_vertices);

	//////////////////////////////////////////////////
	// Renders the normal vectors

	if (_render_normal_vectors)
	{

		// Enable the shader program
		glUseProgram(_program_normals);

		glUniformMatrix4fv(_viewMatrixLocationN, 1, GL_FALSE, &rotated_view[0][0]); // send the view matrix to our shader
		glUniformMatrix4fv(_modelMatrixLocationN, 1, GL_FALSE, &_modelMatrix[0][0]); //


																					 // Bind the buffer and switch it to an active buffer
		glBindVertexArray(_vaoIDNormals[0]);
		glDrawArrays(GL_LINES, 0, _num_vertices_normals);
	}

	// Unbind our Vertex Array Object
	glBindVertexArray(0);

	// Unbind the shader program
	glUseProgram(0);


}